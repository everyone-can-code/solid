[
{
	"uri": "//localhost/solid/ru/srp/",
	"title": "SRP (Single Responsibility Principle)",
	"tags": [],
	"description": "SRP (Single Responsibility Principle)",
	"content": " SRP (Single Responsibility Principle) Каждый объект должен иметь одну ответственность и эта ответственность должна быть полностью инкапсулирована в класс. Все его поведения должны быть направлены исключительно на обеспечение этой ответственности.\nПринцип SRP можно применить только в том случае, когда:  объекту класса становится позволительно слишком много\n любое изменение логики поведения объекта приводит к изменениям в других местах приложения, где это не подразумевалось изначально\n приходится тестировать, исправлять ошибки, даже если за их работоспособность отвечает третья сторона\n невозможно легко отделить и применить класс в другой сфере приложения, так как это потянет ненужные зависимости\n  Bad: Good: Read More:  https://github.com/SanderV1992/SOLID-examples/tree/master/src/srp/good https://ru.wikipedia.org/  "
},
{
	"uri": "//localhost/solid/ru/ocp/",
	"title": "OCP (Open Closed Principle)",
	"tags": [],
	"description": "OCP (Open Closed Principle)",
	"content": " OCP (Open Closed Principle) программные сущности (классы, модули, функции и т. п.) должны быть открыты для расширения, но закрыты для изменения.\nПринцип OCP говорит о том что, программные сущности должны быть:  открыты для расширения: это означает, что поведение модуля может быть расширено. Когда требования приложения изменяются, мы способны расширить модуль новыми линиями поведения, которые удовлетворяют возникшим изменениям.\nДругими словами, у нас есть возможность расширять классы, делая их более функциональными. При этом поведение старых методов не меняется, как и самого класса в целом.\n закрыты для изменения/модификации: в результате расширения поведения сущности, не должны вноситься изменения в код, который эти сущности использует.\n  Это особенно важно для боевого кода в производственной среде:  любые изменения в исходном коде, требуют за собой пересмотр всего кода, где используется данная сущность/класс.\n пересмотр модульного тестирования и других подобных процедур.\n  Код, подчиняющийся данному принципу, не изменяется при расширении и поэтому не требует таких трудозатрат.\nRead More:  https://github.com/SanderV1992/SOLID-examples/tree/master/src/ocp/good https://ru.wikipedia.org/  "
},
{
	"uri": "//localhost/solid/ru/lsp/",
	"title": "LSP (Liskov Substitution Principle)",
	"tags": [],
	"description": "LSP (Liskov Substitution Principle)",
	"content": " LSP (Liskov Substitution Principle) функции, которые используют базовый тип, должны иметь возможность использовать подтипы базового типа, не зная об этом.\nТаким образом, идея Лисков о «подтипе» даёт определение понятия замещения — если S является подтипом T, тогда объекты типа T в программе могут быть замещены объектами типа S без каких-либо изменений желательных свойств этой программы (например, корректность).\nЭтот принцип является важнейшим критерием для оценки качества принимаемых решений при построении иерархий наследования. Сформулировать его можно в виде простого правила: тип S будет подтипом Т тогда и только тогда, когда каждому объекту oS типа S соответствует некий объект oT типа T таким образом, что для всех программ P, реализованных в терминах T, поведение P не будет меняться, если oT заменить на oS.\nБолее простыми словами можно сказать, что поведение наследуемых классов не должно противоречить поведению, заданному базовым классом, то есть поведение наследуемых классов должно быть ожидаемым для кода, использующего переменную базового типа.\nПринцип LSP соблюден в том случаи, если:  никакие новые исключения не должны создаваться методами подтипа, за исключением тех случаев, когда сами эти исключения являются подтипами исключений, создаваемых методами супертипа. не нарушает функциональности возвращает одинаковый тип объект подкласса согласовывает контракт с суперклассом  Принцип LSP нарушен в том случаи, если:  родительский класс в методе вызывает какой-то внешний сервис, а дочерний полностью переписывает метод  Read More:  https://github.com/SanderV1992/SOLID-examples/tree/master/src/lsp/good https://dou.ua/lenta/articles/liskov-substitution-principle/ https://ru.wikipedia.org/  "
},
{
	"uri": "//localhost/solid/ru/isp/",
	"title": "ISP (Interface segregation principle)",
	"tags": [],
	"description": "ISP (Interface segregation principle)",
	"content": " ISP (Interface segregation principle) следование этому принципу помогает системе оставаться гибкой при внесении изменений в логику работы и пригодной для рефакторинга.\nПринцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы необходимо разделять на более маленькие и специфические, чтобы программные сущности маленьких интерфейсов знали только о методах, которые необходимы им в работе. В итоге, при изменении метода интерфейса не должны меняться программные сущности, которые этот метод не используют.\nRead More:  https://github.com/SanderV1992/SOLID-examples/tree/master/src/isp/good  "
},
{
	"uri": "//localhost/solid/ru/dip/",
	"title": "DIP (Dependency Inversion Principle)",
	"tags": [],
	"description": "DIP (Dependency Inversion Principle)",
	"content": " DIP (Dependency Inversion Principle) Инверсия зависимостей говорит о связи между различными классами или модулями (используемый для уменьшения связанности в компьютерных программах).\nОсновной девиз инверсии зависимостей: Любые высшие классы всегда должны зависеть от абстракции класса, а не от деталей.\nЭто направлено на уменьшение связи между классами, достигается путем введения абстракции между уровнями, поэтому не заботится о реальной реализации.\nФормулировка:  Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.  Теперь давайте посмотрим, как будет выглядеть наивный дизайн без инверсии зависимостей: Создание абстракции между разными сотрудниками и менеджером привело к очень красивому коду проектирования, который легко поддерживать и расширять: Read More:  https://github.com/SanderV1992/SOLID-examples/tree/master/src/dip/good  "
},
{
	"uri": "//localhost/solid/ru/",
	"title": "5 SOLID Principles of Object-oriented Design",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost/solid/ru/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost/solid/ru/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]